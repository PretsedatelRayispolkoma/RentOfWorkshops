@using RentOfWorkshopsCore.DBConnection
@using RentOfWorkshopsCore.DBContext
@using RentOfWorkshopsWEB.Shared.Modals
@using RentOfWorkshopsWEB.Shared.Modals.AddSpace
@using RentOfWorkshopsWEB.Shared.Modals.UpdateSpace

@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject UserContext UserContext
@inject SpaceCollection SpaceCollection

<div class="space">
    <div/>
    <ContextMenuTrigger MenuId="@Space.Id.ToString()">
        <div class="space-item">
            @if(_photoBytes != null)
            {
                <img class="space-image" src="data:image/bmp;base64,@(Convert.ToBase64String(_photoBytes))"/>
            }
            else
            {
                <img class="space-image" src="images/noimage.jpg"/>
            }
            <div class="space-item-info">
                <div class="space-item-title">
                    <a class="space-item-title-a" @onclick="NavigateIntoSpace">@Space.TypeOfSpace.Name</a>
                </div>
                <div class="secondary-info">
                    <div class="address">
                        <p class="secondary-info-p">@Space.House.Street.Name, </p>
                        <p class="secondary-info-p">@Space.House.Number</p>
                    </div>
                </div>
            </div>
            <div class="space-item-info-numbers">
                <div>
                     <p class="space-item-info-numbers-p">@Space.AmountPerHour руб./час</p>
                </div>
                <div>
                   <p class="space-item-info-numbers-p">@Space.Square кв. м</p>
                </div>
            </div>
        </div>   
    </ContextMenuTrigger>
    <div/>
</div>

@if(UserContext.User.RoleId == 1)
{
    <ContextMenu Id="@Space.Id.ToString()">
        <Item OnClick=OpenAddSpace>
            Добавить
        </Item>
        <Item OnClick=OpenUpdateSpace>
            Обновить
        </Item>
        <Item OnClick=DeleteButtonClicked>
            Удалить
        </Item>
    </ContextMenu>
}

<AddSpaceModalComponent @ref=_addSpace/>
<DeleteModalComponent DeleteCallback=Delete @ref=_deleteModal/>
<UpdateSpaceComponent CurrentSpace=Space @ref=_updateSpace/>
<SpaceInfoModalComponent CurrentSpace=Space @ref=_spaceInfo/>
<ErrorModalComponent @ref=_errorModal/>

@code {
    [Parameter]
    public Space Space { get; set; }

    private AddSpaceModalComponent _addSpace;
    private DeleteModalComponent _deleteModal;
    private UpdateSpaceComponent _updateSpace;
    private SpaceInfoModalComponent _spaceInfo;
    private ErrorModalComponent _errorModal;

    private byte[] _photoBytes;

    protected override Task OnInitializedAsync()
    {
        if(Space.Picture != null)
            _photoBytes = Space.Picture;

        var rent = SQLConnection.GetRents(UserContext.User.ClientId).Where(p => p.EndDate > DateTime.Now).FirstOrDefault();
        if (rent == null)
        {
            SQLConnection.AttachSpace(Space);
            Space.StatusId = 1;
            SQLConnection.Save();
        }
        return base.OnInitializedAsync();
    }

    private async void NavigateIntoSpace()
    {
        if (UserContext.User.RoleId == 1 || UserContext.User.RoleId == 2)
            _spaceInfo.Open();
        else
        {
            _errorModal.Title = "Упс..";
            _errorModal.Message = "Для просмотра необходимо войти в систему";
            _errorModal.Open();
        }
    }

    private void DeleteButtonClicked()
    {
        _deleteModal.Open();
    }

    private void OpenUpdateSpace()
    {
        _updateSpace.Open();
    }

    private void OpenAddSpace()
    {
        _addSpace.Open();
    }

    private void Delete(bool toDelete)
    {
        if(toDelete && SpaceCollection.SpaceList.Contains(Space))
        {
            SQLConnection.DeleteSpace(Space.Id);
            SpaceCollection.UpdateList();
        }
    }
}
