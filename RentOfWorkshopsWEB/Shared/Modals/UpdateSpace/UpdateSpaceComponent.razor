@using RentOfWorkshopsCore.DBConnection
@using RentOfWorkshopsCore.DBContext
@using RentOfWorkshopsWEB.Shared.Modals.Registration

@inherits Modals.ModalBaseComponent

@inject SpaceCollection SpaceCollection

<div class="@ModalClass" tabindex="-1" role="dialog" style="@ModalDisplay">
    <div class="modal-dialog modal-dialog-scrollable" role="document" >
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title unselectable">
                    Обновить данные
                </h5>
            </div>
            <div class="modal-body">

                <AmountComponent Title="Цена/ч" Value="@_amount" AmountCB=GetAmount/>
                <SquareComponent Title="Площадь" Value="@_square" SquareCB=GetSquare/>
                <textarea class="form-control" @bind="_description" @bind:event="oninput"></textarea>
                
                <div class="add-image">
                    @if(_photoBytes != null)
                    {
                        <img class="space-image" src="data:image/bmp;base64,@(Convert.ToBase64String(_photoBytes))"/>
                    }
                    <InputFile OnChange="AddImage" accept="image/*"/>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" @onclick=Update>Обновить</button>
                <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="Close">Отмена</button>
            </div>
        </div>
    </div>
</div>

@if (ShowBackdrop)
{
    <div class="modal-backdrop fade show"/>
}

@code {
    [Parameter]
    public Space CurrentSpace  { get; set; }

    private int _cityId = 0;
    private int _streetId = 0;
    private int _houseId = 0;

    private decimal _amount;
    private int _square;
    private byte[] _photoBytes;
    private string _description;

    protected override Task OnInitializedAsync()
    {
        if(CurrentSpace.Picture != null)
            _photoBytes = CurrentSpace.Picture;

        if (!String.IsNullOrEmpty(CurrentSpace.Description))
            _description = CurrentSpace.Description;

        _amount = CurrentSpace.AmountPerHour;
        _square = CurrentSpace.Square;

        return base.OnInitializedAsync();
    }

    private async Task AddImage(InputFileChangeEventArgs e)
    {
        MemoryStream ms = new MemoryStream();
        await e.File.OpenReadStream().CopyToAsync(ms);
        _photoBytes = ms.ToArray();
        await InvokeAsync(StateHasChanged);
    }

    private void GetAmount(decimal amount)
    {
        _amount = Convert.ToDecimal(amount);
    }

    private void GetSquare(int square)
    {
        _square = Convert.ToInt32(square);
    }

    private void Update()
    {
        SQLConnection.AttachSpace(CurrentSpace);
        CurrentSpace.AmountPerHour = _amount;
        CurrentSpace.Square = _square;
        CurrentSpace.Description = _description;
        CurrentSpace.Picture = _photoBytes;

        if(!(_amount <= 0) && !(_square <= 0))
        {
            try
            {
                SQLConnection.Save();
                Close();
                SpaceCollection.UpdateList();
            }
            catch(Exception ex)
            {

            }
        }
        else
        {
            
        }
    }
}
