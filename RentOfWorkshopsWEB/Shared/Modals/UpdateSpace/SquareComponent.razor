@using RentOfWorkshopsCore.Validation
@using System.ComponentModel
@inherits FieldBase

<div class="container" margin="20">
    <label class="unselectable">
        @Title
    </label>
</div>
<div class="container">
    <input class="@_inputClass form-control unselectable" value="@Value" @oninput=OnInput/>
</div>
<div class="invalid-feedback">
    @_invalidValueMessage
</div>

@code {
    [Parameter]
    public EventCallback<int> SquareCB { get; set; }

    private void OnInput(ChangeEventArgs e)
    {
        _value = e.Value;
        ValueValidation();
    }

    protected override void ValueValidation()
    {
        TypeConverter typeConverter = TypeDescriptor.GetConverter(typeof(int));
        _invalidValueMessage = "";
        _inputClass = "";

        if(typeConverter.IsValid(_value))
        {
            _invalidValueMessage = "";
            _inputClass = "";
            try
            {
                SquareCB.InvokeAsync(Convert.ToInt32(_value));
            }
            catch(Exception ex)
            {
                _inputClass = "is-invalid";
                _invalidValueMessage = ex.Message;
            }
        }
        else
        {
            _inputClass = "is-invalid";
            _invalidValueMessage = "Incorrect input";
        }
    }
}

